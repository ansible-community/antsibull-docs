{#
  Copyright (c) Ansible Project
  GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
  SPDX-License-Identifier: GPL-3.0-or-later
#}

{% from 'macros/choiceslist.rst.j2' import in_rst as choices_rst %}
{% from 'macros/choiceslist.rst.j2' import in_html as choices_html %}
{% from 'macros/version_added.rst.j2' import version_added_rst, version_added_html %}

{% macro in_rst(elements) %}
.. rst-class:: ansible-option-table

.. list-table::
  :width: 100%
  :widths: auto
  :header-rows: 1

  * - Key
    - Description
{% for key, value in elements recursive %}
{#   return value name #}

  * - .. raw:: html

        {% for i in range(1, loop.depth) %}<div class="ansible-option-indent"></div>{% endfor %}<div class="ansible-option-cell">
{% for full_key in value['full_keys'] %}
        <div class="ansibleOptionAnchor" id="return-{% for part in full_key %}@{ part | urlencode }@{% if not loop.last %}/{% endif %}{% endfor %}"></div>
{% endfor %}

{% for full_key in value['full_keys_rst'] %}
      .. _ansible_collections.@{plugin_name}@_@{plugin_type}@__return-{% for part in full_key %}@{ part }@{% if not loop.last %}/{% endif %}{% endfor %}:
{% endfor %}

      .. rst-class:: ansible-option-title

      **@{ key }@**

      .. raw:: html

        <a class="ansibleOptionLink" href="#return-{% for part in value['full_key'] %}@{ part | urlencode }@{% if not loop.last %}/{% endif %}{% endfor %}" title="Permalink to this return value"></a>

      .. rst-class:: ansible-option-type-line

      :ansible-option-type:`@{ value['type'] | documented_type }@`
      {%- if value['type'] == 'list' and value['elements'] is not none %} / :ansible-option-elements:`elements=@{ value['elements'] | documented_type }@`{% endif %}
{%-   if value['version_added'] is still_relevant(collection=value['version_added_collection'] or collection) %}


      :ansible-option-versionadded:`added in @{ version_added_rst(value['version_added'], value['version_added_collection'] or collection) }@`
{%   endif %}
{#   description #}


      .. raw:: html

        </div>

    - .. raw:: html

        {% for i in range(1, loop.depth) %}<div class="ansible-option-indent-desc"></div>{% endfor %}<div class="ansible-option-cell">

{%   for desc in value['description'] %}
      @{ desc | rst_ify | indent(6) }@

{%   endfor %}
{%   if value['returned'] %}

      .. rst-class:: ansible-option-line

      :ansible-option-returned-bold:`Returned:` @{ value['returned'] | rst_ify | indent(6) }@
{%   endif %}
{#   Show possible choices and highlight details #}
{%   if value['choices'] %}

      .. rst-class:: ansible-option-line

      :ansible-option-choices:`Can only return:`

@{     choices_rst(value['choices'], has_no_default=True) }@
{%   endif %}
{%   if value['sample'] is not none %}

      .. rst-class:: ansible-option-line
      .. rst-class:: ansible-option-sample

      :ansible-option-sample-bold:`Sample:` :ansible-rv-sample-value:`@{ value['sample'] | antsibull_to_json | rst_escape(escape_ending_whitespace=true) | indent(6, blank=true) }@`
{%   endif %}


      .. raw:: html

        </div>

{%   if value['contains'] %}
    @{ loop(value['contains'] | dictsort) }@
{%   endif %}
{% endfor %}
{% endmacro %}

{##################################################################################################################}

{% macro in_html(elements) %}
.. raw:: html

  <table class="colwidths-auto ansible-option-table docutils align-default" style="width: 100%">
  <thead>
  <tr class="row-odd">
    <th class="head"><p>Key</p></th>
    <th class="head"><p>Description</p></th>
  </tr>
  </thead>
  <tbody>
{% set row_class = cycler('even', 'odd') %}
{% for key, value in elements recursive %}
{#   return value name #}
  <tr class="row-@{ row_class.next() }@">
    <td>{% for i in range(1, loop.depth) %}<div class="ansible-option-indent"></div>{% endfor %}<div class="ansible-option-cell">
{%   for full_key in value['full_keys'] %}
      <div class="ansibleOptionAnchor" id="return-{% for part in full_key %}@{ part | urlencode }@{% if not loop.last %}/{% endif %}{% endfor %}"></div>
{%   endfor %}
      <p class="ansible-option-title"><strong>@{ key | escape }@</strong></p>
      <a class="ansibleOptionLink" href="#return-{% for part in value['full_key'] %}@{ part | urlencode }@{% if not loop.last %}/{% endif %}{% endfor %}" title="Permalink to this return value"></a>
      <p class="ansible-option-type-line">
        <span class="ansible-option-type">@{ value['type'] | documented_type }@</span>
{%   if value['type'] == 'list' and value['elements'] is not none %}
        / <span class="ansible-option-elements">elements=@{ value['elements'] | documented_type }@</span>
{%   endif %}
      </p>
{%   if value['version_added'] is still_relevant(collection=value['version_added_collection'] or collection) %}
      <p><span class="ansible-option-versionadded">added in @{ version_added_html(value['version_added'], value['version_added_collection'] or collection) }@</span></p>
{%   endif %}
    </div></td>
{#   description #}
    <td>{% for i in range(1, loop.depth) %}<div class="ansible-option-indent-desc"></div>{% endfor %}<div class="ansible-option-cell">
{%   for desc in value['description'] %}
      <p>@{ desc | html_ify | indent(6, blank=true) }@</p>
{%   endfor %}
{%   if value['returned'] %}
      <p class="ansible-option-line"><span class="ansible-option-returned-bold">Returned:</span> @{ value['returned'] | html_ify | indent(6, blank=true) }@</p>
{%   endif %}
{#   Show possible choices and highlight details #}
{%   if value['choices'] %}
      <p class="ansible-option-line"><span class="ansible-option-choices">Can only return:</span></p>
@{     choices_html(value['choices'], has_no_default=True) }@
{%   endif %}
{%   if value['sample'] is not none %}
      <p class="ansible-option-line ansible-option-sample"><span class="ansible-option-sample-bold">Sample:</span> <code class="ansible-value literal notranslate ansible-option-sample">@{ value['sample'] | antsibull_to_json | escape | indent(6, blank=true) }@</code></p>
{%   endif %}
    </div></td>
  </tr>
{%   if value['contains'] %}
@{     loop(value['contains'] | dictsort) }@
{%   endif %}
{% endfor %}
  </tbody>
  </table>

{% endmacro %}
