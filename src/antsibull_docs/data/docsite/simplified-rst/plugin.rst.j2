{#
  Copyright (c) Ansible Project
  GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
  SPDX-License-Identifier: GPL-3.0-or-later
#}

.. Created with antsibull-docs @{ antsibull_docs_version }@

{% from 'macros/attributes.rst.j2' import in_rst as attributes_rst with context -%}
{% from 'macros/collection_links.rst.j2' import add as add_collection_links with context -%}
{% from 'macros/parameters.rst.j2' import in_html as parameters_html with context -%}
{% from 'macros/returnvalues.rst.j2' import in_html as return_docs_html with context -%}
{% from 'macros/version_added.rst.j2' import version_added_rst -%}

{% set has_positional_parameters = false -%}
{% set has_keyword_parameters = false -%}

{% if doc['short_description'] -%}
{%   set title = plugin_name ~ ' ' ~ plugin_type ~ ' -- ' ~ doc['short_description'] | rst_ify -%}
{% else -%}
{%   set title = plugin_name ~ ' ' ~ plugin_type -%}
{% endif -%}

@{ title }@
@{ '+' * title|column_width }@

{% if collection == 'ansible.builtin' -%}
This {% if plugin_type == 'module' %}module{% else %}@{ plugin_type }@ plugin{% endif %}
is part of ``ansible-core`` and included in all Ansible
installations. In most cases, you can use the short
{% if plugin_type == 'module' %}module{% else %}plugin{% endif %} name
``@{ plugin_name.rsplit('.', 1)[-1] }@``{% if plugin_type == 'module' %} even without specifying the `collections keyword
<https://docs.ansible.com/ansible/latest/collections_guide/collections_using_playbooks.html#using-collections-in-playbooks>`__{% endif %}.
However, we recommend you use the `Fully Qualified Collection Name (FQCN)
<https://docs.ansible.com/ansible/latest/reference_appendices/glossary.html#term-Fully-Qualified-Collection-Name-FQCN>`__
``@{ plugin_name }@`` for easy linking to the {% if plugin_type == 'module' %}module{% else %}plugin{% endif %}
documentation and to avoid conflicting with other collections that may have
the same {% if plugin_type == 'module' %}module{% else %}@{ plugin_type }@ plugin{% endif %} name.
{% else %}
This {% if plugin_type == 'module' %}module{% else %}@{ plugin_type }@ plugin{% endif %} is part of the `@{collection}@ collection <@{ collection | collection_url }@>`_{% if collection_version %} (version @{ collection_version }@){% endif %}.

{%   if for_official_docsite %}
You might already have this collection installed if you are using the ``ansible`` package.
{%   endif %}
It is not included in ``ansible-core``.
To check whether it is installed, run ``ansible-galaxy collection list``.

To install it, use: @{ collection | collection_install | rst_code }@.
{%   if doc['requirements'] %}
You need further requirements to be able to use this {% if plugin_type == 'module' %}module{% else %}@{ plugin_type }@ plugin{% endif %},
see `Requirements <ansible_collections.@{plugin_name}@_@{plugin_type}@_requirements_>`_ for details.
{%   endif %}

To use it in a playbook, specify: ``@{plugin_name}@``.
{% endif %}

{% if doc['version_added'] is still_relevant(collection=doc['version_added_collection'] or collection) -%}
New in @{ version_added_rst(doc['version_added'], doc['version_added_collection'] or collection) }@
{% endif %}

.. contents::
   :local:
   :depth: 1

{% if doc['deprecated'] -%}
DEPRECATED
----------
{% if doc['deprecated']['removed_at_date'] %}
:Removed in: major release after @{ doc['deprecated']['removed_at_date'] | rst_ify }@
{% elif doc['deprecated']['removed_in'] %}
:Removed in: version @{ doc['deprecated']['removed_in'] | rst_ify }@
{% else %}
:Removed in: a future release
{% endif %}
{% if doc['deprecated']['removed_from_collection'] and doc['deprecated']['removed_from_collection'] != collection %}
             of @{ doc['deprecated']['removed_from_collection'] | rst_ify }@
{% endif %}
:Why: @{ doc['deprecated']['why'] | rst_ify | indent(6) }@
:Alternative: @{ doc['deprecated']['alternative'] | rst_ify | indent(14) }@
{% endif %}

{% if plugin_type == 'callback' %}
Callback plugin
---------------

{%   if doc['type'] == 'stdout' %}
This plugin is a **stdout callback**. You can use only use one stdout callback at a time. Additional aggregate or notification callbacks can be enabled though.
{%   elif doc['type'] == 'aggregate' %}
This plugin is an **aggregate callback**. It adds additional console output next to the configured stdout callback.
{%   elif doc['type'] == 'notification' %}
This plugin is a **notification callback**. It sends information for a playbook run to other applications, services, or systems.
{%   endif %}

{% endif %}
Synopsis
--------

{%   for desc in doc['description'] -%}
- @{ desc | rst_ify | indent(width=2) }@
{%   endfor %}

{% if doc['has_action'] %}
This module has a corresponding action plugin.
{% endif %}

{% if doc['aliases'] -%}
Aliases: @{ ', '.join(doc['aliases'] | sort) }@
{% endif %}

{% if doc['requirements'] -%}
.. _ansible_collections.@{plugin_name}@_@{plugin_type}@_requirements:

Requirements
------------
{%   if plugin_type in ('module', 'module_util') %}
The below requirements are needed on the host that executes this @{ plugin_type }@.
{%   else %}
The below requirements are needed on the local controller node that executes this @{ plugin_type }@.
{%   endif %}

{%   for req in doc['requirements'] %}
- @{ req | rst_ify | indent(width=2) }@
{%   endfor %}

{% endif %}

{% set options_to_skip = [] %}

{% if doc['options']['_terms'] and plugin_type in ['lookup'] %}
{%   set options_to_skip = options_to_skip + ['_terms'] %}
{%   set has_positional_parameters = true %}

Terms
-----

@{   parameters_html([['Terms', doc['options']['_terms']]], suboption_key='suboptions') }@

{% endif %}

{% if doc['options']['_input'] and plugin_type in ['filter', 'test'] %}
{%   set options_to_skip = options_to_skip + ['_input'] %}

Input
-----

{%   if plugin_type == 'filter' %}
This describes the input of the filter, the value before ``| @{plugin_name}@``.
{%   elif plugin_type == 'test' %}
This describes the input of the test, the value before ``is @{plugin_name}@`` or ``is not @{plugin_name}@``.
{%   endif %}

@{   parameters_html([['Input', doc['options']['_input']]], suboption_key='suboptions') }@

{% endif %}

{% if doc['positional'] and plugin_type in ['filter', 'test'] and doc['positional'] != ['_input'] %}
{%   set has_positional_parameters = true %}
{%   set options_to_skip = options_to_skip + doc['positional'] %}

Positional parameters
---------------------

This describes positional parameters of the @{plugin_type}@. These are the values ``positional1``, ``positional2`` and so on in the following
{%   if plugin_type == 'filter' %}
example: ``input | @{plugin_name}@(positional1, positional2, ...)``
{%   elif plugin_type == 'test' %}
examples: ``input is @{plugin_name}@(positional1, positional2, ...)`` and ``input is not @{plugin_name}@(positional1, positional2, ...)``
{%   endif %}

@{   parameters_html(doc['options'] | extract_options_from_list(doc['positional'], options_to_ignore=['_input']), suboption_key='suboptions') }@

{% endif %}

{% if doc['options'] | remove_options_from_list(options_to_skip) -%}
{%   set has_keyword_parameters = true -%}

{%   if plugin_type in ['lookup', 'filter', 'test'] %}
Keyword parameters
------------------

This describes keyword parameters of the @{plugin_type}@. These are the values ``key1=value1``, ``key2=value2`` and so on in the following
{%     if plugin_type == 'filter' %}
example: ``input | @{plugin_name}@(key1=value1, key2=value2, ...)``
{%     elif plugin_type == 'test' %}
examples: ``input is @{plugin_name}@(key1=value1, key2=value2, ...)`` and ``input is not @{plugin_name}@(key1=value1, key2=value2, ...)``
{%     elif plugin_type == 'lookup' %}
examples: ``lookup('@{plugin_name}@', key1=value1, key2=value2, ...)`` and ``query('@{plugin_name}@', key1=value1, key2=value2, ...)``
{%     endif %}
{%   else %}
Parameters
----------
{%   endif %}

@{   parameters_html(doc['options'] | remove_options_from_list(options_to_skip) | dictsort, suboption_key='suboptions') }@
{% endif %}

{% if doc['attributes'] %}

Attributes
----------

@{   attributes_rst(doc['attributes']) }@
{% endif %}

{% if doc['notes'] or (has_positional_parameters and has_keyword_parameters) -%}
Notes
-----

{%   if has_positional_parameters and has_keyword_parameters %}
- When keyword and positional parameters are used together, positional parameters must be listed before keyword parameters:
{%     if plugin_type == 'filter' %}
  ``input | @{plugin_name}@(positional1, positional2, key1=value1, key2=value2)``
{%     elif plugin_type == 'test' %}
  ``input is @{plugin_name}@(positional1, positional2, key1=value1, key2=value2)`` and ``input is not @{plugin_name}@(positional1, positional2, key1=value1, key2=value2)``
{%     elif plugin_type == 'lookup' %}
  ``lookup('@{plugin_name}@', term1, term2, key1=value1, key2=value2)`` and ``query('@{plugin_name}@', term1, term2, key1=value1, key2=value2)``
{%     endif %}
{%   endif %}
{%   if doc['notes'] %}
{%     for note in doc['notes'] %}
- @{ note | rst_ify | indent(width=2) }@
{%     endfor %}
{%   endif %}
{% endif %}

{% if doc['seealso'] -%}
See Also
--------

{% for item in doc['seealso'] %}
{%   if item.module is defined and item.description %}
* @{ reference_plugin_rst(item['module'], 'module') }@

  @{ item['description'] | rst_ify | indent(2) }@
{%   elif item.module is defined %}
* @{ reference_plugin_rst(item['module'], 'module') }@

  The official documentation on the **@{ item['module'] }@** module.
{%   elif item.plugin is defined and item.plugin_type is defined and item.description %}
* @{ reference_plugin_rst(item['plugin'], item['plugin_type']) }@ @{ item['plugin_type'] }@ plugin

  @{ item['description'] | rst_ify | indent(2) }@
{%   elif item.plugin is defined and item.plugin_type is defined %}
* @{ reference_plugin_rst(item['plugin'], item['plugin_type']) }@ @{ item['plugin_type'] }@ plugin

  The official documentation on the **@{ item['plugin'] }@** @{ item['plugin_type'] }@ plugin.
{%   elif item.name is defined and item.link is defined and item.description %}
* `@{ item['name'] }@ <@{ item['link'] }@>`_

  @{ item['description'] | rst_ify | indent(2) }@
{%   elif item.ref is defined and item.description %}
* :ref:`@{ item['ref'] }@`

  @{ item['description'] | rst_ify | indent(2) }@
{%   endif %}
{% endfor %}
{% endif %}

{% if examples -%}
Examples
--------

.. code-block:: @{ examples_format | rst_format }@

@{ examples | indent(4, True) }@

{% endif %}

{% if 'ansible_facts' in returndocs and plugin_type == 'module' %}
{%   set returnfacts = returndocs['ansible_facts']['contains'] %}
{%   set _x = returndocs.pop('ansible_facts', None) %}
{% endif %}

{% if returnfacts -%}
Returned Facts
--------------
Facts returned by this module are added/updated in the ``hostvars`` host facts and can be referenced by name just like any other host fact. They do not need to be registered in order to use them.

@{   return_docs_html(returnfacts | dictsort) }@
{% endif %}

{% if returndocs -%}
{%   if plugin_type not in ['lookup', 'filter', 'test'] %}
{#     This only makes sense for plugins which can return more than one value. #}
Return Values
-------------
The following are the fields unique to this @{ plugin_type }@:
{%   else %}
Return Value
------------
{%   endif %}

{%   if plugin_type in ['lookup', 'filter', 'test'] and returndocs | length == 1 and (returndocs | first).startswith('_') %}
@{     return_docs_html([['Return value', returndocs.values() | first]]) }@
{%   else %}
@{     return_docs_html(returndocs | dictsort) }@
{%   endif %}
{% endif %}

{% if doc['deprecated'] %}
Status
------

{% if doc['deprecated']['removed_from_collection'] and doc['deprecated']['removed_from_collection'] != collection %}
{%   if doc['deprecated']['removed_at_date'] %}
- This @{ plugin_type }@ will be removed in a major release after @{ doc['deprecated']['removed_at_date'] | rst_ify }@
  of @{ doc['deprecated']['removed_from_collection'] | rst_ify }@.
{%   elif doc['deprecated']['removed_in'] %}
- This @{ plugin_type }@ will be removed in version @{ doc['deprecated']['removed_in'] | string | rst_ify }@
  of @{ doc['deprecated']['removed_from_collection'] | rst_ify }@.
{%   else %}
- This @{ plugin_type }@ will be removed in a future release of @{ doc['deprecated']['removed_from_collection'] | rst_ify }@.
{%   endif %}
{% else %}
{%   if doc['deprecated']['removed_at_date'] %}
- This @{ plugin_type }@ will be removed in a major release after @{ doc['deprecated']['removed_at_date'] | rst_ify }@.
{%   elif doc['deprecated']['removed_in'] %}
- This @{ plugin_type }@ will be removed in version @{ doc['deprecated']['removed_in'] | string | rst_ify }@.
{%   else %}
- This @{ plugin_type }@ will be removed in a future release.
{%   endif %}
{% endif %}
  *[deprecated]*
- For more information see `DEPRECATED`_.

{% endif %}

{% if doc['author'] -%}
Authors
~~~~~~~

{%   for author_name in doc['author'] %}
- @{ author_name | massage_author_name }@
{%   endfor %}

{% endif %}

{% if plugin_type != 'module' %}
.. hint::
    Configuration entries for each entry type have a low to high priority order. For example, a variable that is lower in the list will override a variable that is higher up.
{% endif %}

{% if collection_links %}
Collection links
~~~~~~~~~~~~~~~~

@{   add_collection_links(collection_links) -}@
{% endif %}

{% if nonfatal_errors %}
There were some errors parsing the documentation for this plugin.  Please file a bug with the `@{ collection }@ collection <@{ collection_issue_tracker or (collection | collection_url) }@>`_.

The errors were:

{%   for error in nonfatal_errors %}
* ::

@{     error | indent(width=8, first=True) }@

{%   endfor %}
{% endif %}
